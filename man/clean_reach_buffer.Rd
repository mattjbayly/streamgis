% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_reach_buffer.R
\name{clean_reach_buffer}
\alias{clean_reach_buffer}
\title{Clean Reach Buffer}
\usage{
clean_reach_buffer(
  center_line = NA,
  buffer_width = 100,
  cross_section_lines = NA,
  us_distance_colname = "us_distance_m",
  epsg = 26910
)
}
\arguments{
\item{center_line}{sf dataframe. Stream center line spatial data. Must be
imported as an sf dataframe object of LINESTRING or MULTILINESTRING. The
object must also be projected to a local UTM projection with units of meters.}

\item{buffer_width}{Numeric (fixed) or column name (variable). If numeric
value is supplied, the buffer width will be fixed and continuously
applied across the stream line. If a column name is provided (linked to the
\code{center_line} object), the buffer width will be fixed according values
provided in the \code{center_line}dataframe.}

\item{cross_section_lines}{sf dataframe. Object returned from
\code{cross_section_lines} or user-supplied perpendicular lines to cut buffer.}

\item{us_distance_colname}{Character string. Optional. Column name within
the \code{cross_section_lines} object specifying the upstream distance of the
cross section. Attribute IDs will be joined to polygons by upstream line segment.
If \code{us_distance_colname} is missing, linkages will be random.}

\item{epsg}{Numeric. EPSG code for local UTM projection system (see:
https://spatialreference.org/ref/epsg/ for details).}
}
\value{
An sf dataframe object of of stream buffers neatly clipped to reach
endpoints.
}
\description{
Variable buffer cut to stream reaches
}
\details{
Function takes a stream center line object, a section of cross-
sectional lines either from \code{cross_section_lines} or supplied by user and
creates a clean buffer around the stream center line, clipped neatly to
reach end points.
}
\examples{
\dontrun{

library(streamgis)
# Import a simple stream center line
# center_line <- st_read("./path/to/my/file.gpkg", layer = "layer name")
# or use default provided for tutorial
fname <- system.file("extdata", "center_line.gpkg", package="streamgis")
center_line <- sf::st_read(fname)
plot(sf::st_geometry(center_line))

# Sample points along line
pol <- suppressWarnings({ points_on_line(center_line,
  point_spacing = 100, epsg = 26910) })

cross_section_lines <- cross_section_lines(center_line = center_line,
  points = pol,
  cross_profile_length = 250,
  epsg = 26910)

# Make distance field continuious
fix_order <- cross_section_lines[order(cross_section_lines$l_id,
cross_section_lines$p_id), ]

fix_order$us_distance_m <- cumsum(fix_order$distance_m)
plot(fix_order['us_distance_m'])

# Overwrite original
cross_section_lines <- fix_order

# Apply clipped buffer
buff <- clean_reach_buffer(
center_line = center_line,
buffer_width = 50,
cross_section_lines = cross_section_lines,
us_distance_colname = 'us_distance_m',
epsg = 26910)


# Plot to visualize
plot(sf::st_geometry(center_line[center_line$id == 1, ]))
plot(sf::st_geometry(pol[pol$l_id == 1, ]), add = TRUE, col = "red")
plot(sf::st_geometry(cross_section_lines[cross_section_lines$l_id == 1, ]),
add = TRUE, col = "green")
plot(sf::st_geometry(buff[buff$l_id == 1, ]),
add = TRUE, col = "grey")

}

}
