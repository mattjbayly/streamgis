% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cross_section_lines.R
\name{cross_section_lines}
\alias{cross_section_lines}
\title{Perpendicular Cross-Section Lines}
\usage{
cross_section_lines(
  center_line = NA,
  points = NA,
  cross_profile_length = 250,
  epsg = 26910
)
}
\arguments{
\item{center_line}{sf dataframe. Stream center line spatial data. Must be
imported as an sf datamfrace object of LINESTRING or MULTILINESTRING. The
object must have a column named \code{id} to represent the id field. The object
must also be projected to a local UTM projection with units of meters.}

\item{points}{sf dataframe. Stream sample points returned from
from \code{points_on_line} or user-supplied points at which to create
perpendicular profiles.}

\item{cross_profile_length}{Numeric. Length (in meters) of cross-sectional
profile lines. Total length of profile. Divide by two for center to edge}

\item{epsg}{Numeric. EPSG code for local UTM projection system (see:
https://spatialreference.org/ref/epsg/ for details).}
}
\value{
An sf dataframe object of perpendicular cross-sectional profile
lines relative to stream centerline.
}
\description{
Generate perpendicular cross-sectional lines to stream
}
\details{
Function takes a stream center line object and output from
\code{points_on_line} (or user supplied points) to generate perpendicular
lines at sample points.
}
\examples{
\dontrun{

library(streamgis)
# Import a simple stream center line
# center_line <- st_read("./path/to/my/file.gpkg", layer = "layer name")
# or use default provided for tutorial
fname <- system.file("extdata", "center_line.gpkg", package="streamgis")
center_line <- sf::st_read(fname)
plot(sf::st_geometry(center_line))

# Sample points along line
pol <- suppressWarnings({ points_on_line(center_line,
  point_spacing = 100, epsg = 26910) })

csl <- cross_section_lines(center_line = center_line,
  points = pol,
  cross_profile_length = 250,
  epsg = 26910)

# Plot to visualize
plot(sf::st_geometry(center_line[center_line$id == 1, ]))
plot(sf::st_geometry(pol[pol$l_id == 1, ]), add = TRUE, col = "red")
plot(sf::st_geometry(csl[csl$l_id == 1, ]), add = TRUE, col = "blue")

}

}
