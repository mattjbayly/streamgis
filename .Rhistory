prev_line <- st_buffer(prev_line, 0.5)
int1 <- lapply(sf::st_intersects(buff_diss, prev_line), length)
int2 <- lapply(sf::st_intersects(buff_diss, this_line), length)
int1 <- unlist(int1); int2 <- unlist(int2)
previous_int <- which(int2 == 0 & int1 == 1)
continue_int <- which(int2 == 1 & int1 == 1)
buff_diss_store <- buff_diss[previous_int, ]
# Add and build object
build_slits[[coutner]] <- buff_diss_store
coutner <- coutner + 1
# update object
buff_diss <- buff_diss[continue_int, ]
}
buff_diss <- lwgeom::st_split(buff_diss, this_line)
buff_diss <- sf::st_collection_extract(buff_diss, "POLYGON")
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'grey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
# Dissolve buffer
buff$diss <- 1
b2 <- dplyr::group_by(buff)
buff_diss <- dplyr::summarise(b2)
nrow(lines)
buff_diss_raw <- buff_diss
# Store object here.
build_slits <- list()
coutner <- 1
for(i in 1:nrow(lines)) {
this_line <- lines[i, ]
if(i > 1) {
sf::st_intersection(this_line, lines)
# Remove sections already split
prev_line <- lines[i - 1, ]
prev_line <- st_buffer(prev_line, 0.5)
int1 <- lapply(sf::st_intersects(buff_diss, prev_line), length)
int2 <- lapply(sf::st_intersects(buff_diss, this_line), length)
int1 <- unlist(int1); int2 <- unlist(int2)
previous_int <- which(int2 == 0 & int1 == 1)
continue_int <- which(int2 == 1 & int1 == 1)
buff_diss_store <- buff_diss[previous_int, ]
# Add and build object
build_slits[[coutner]] <- buff_diss_store
coutner <- coutner + 1
# update object
buff_diss <- buff_diss[continue_int, ]
}
buff_diss <- lwgeom::st_split(buff_diss, this_line)
buff_diss <- sf::st_collection_extract(buff_diss, "POLYGON")
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'grey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
Sys.sleep(0.5)
}
i
nrow(lines)
this_line <- lines[i, ]
i > 1
sf::st_intersection(this_line, lines)
# Remove sections already split
prev_line <- lines[i - 1, ]
prev_line <- st_buffer(prev_line, 0.5)
int1 <- lapply(sf::st_intersects(buff_diss, prev_line), length)
int2 <- lapply(sf::st_intersects(buff_diss, this_line), length)
int1 <- unlist(int1); int2 <- unlist(int2)
previous_int <- which(int2 == 0 & int1 == 1)
continue_int <- which(int2 == 1 & int1 == 1)
buff_diss_store <- buff_diss[previous_int, ]
# Add and build object
build_slits[[coutner]] <- buff_diss_store
coutner <- coutner + 1
# update object
buff_diss <- buff_diss[continue_int, ]
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'grey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
buff_diss <- lwgeom::st_split(buff_diss, this_line)
buff_diss
lines
fix <- lwgeom::st_split(this_line, prev_line)
fix
fix <- lwgeom::st_split(this_line, prev_line)
fix <- sf::st_collection_extract(fix, "LINESTRING")
fix
fix
mapview(fix)
# Dissolve buffer
buff$diss <- 1
b2 <- dplyr::group_by(buff)
buff_diss <- dplyr::summarise(b2)
nrow(lines)
buff_diss_raw <- buff_diss
# Store object here.
build_slits <- list()
coutner <- 1
i
for(i in 1:nrow(lines)) {
this_line <- lines[i, ]
if(i > 1) {
# Remove sections already split
prev_line <- lines[i - 1, ]
# trim new line by previous line
this_line
fix <- lwgeom::st_split(this_line, prev_line)
fix <- sf::st_collection_extract(fix, "LINESTRING")
if(nrow(fix) > 1) {
stop()
}
prev_line <- st_buffer(prev_line, 0.5)
int1 <- lapply(sf::st_intersects(buff_diss, prev_line), length)
int2 <- lapply(sf::st_intersects(buff_diss, this_line), length)
int1 <- unlist(int1); int2 <- unlist(int2)
previous_int <- which(int2 == 0 & int1 == 1)
continue_int <- which(int2 == 1 & int1 == 1)
buff_diss_store <- buff_diss[previous_int, ]
# Add and build object
build_slits[[coutner]] <- buff_diss_store
coutner <- coutner + 1
# update object
buff_diss <- buff_diss[continue_int, ]
}
buff_diss <- lwgeom::st_split(buff_diss, this_line)
buff_diss <- sf::st_collection_extract(buff_diss, "POLYGON")
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'grey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
Sys.sleep(0.5)
}
fix
# gather segment linked to centerline
sf::st_intersects(fix, center_line)
# gather segment linked to centerline
int_ll <- sf::st_intersects(fix, center_line)
int_ll
# gather segment linked to centerline
int_ll <- sf::st_intersects(fix, center_line)
int_ll <- lapply(int_ll, length)
int_ll
int_ll <- unlist(int_ll)
int_ll
which(int_ll)
int_ll
this_line[which(int_ll == 1), ]
this_line <- this_line[which(int_ll == 1), ]
mapview(this_line) + mapview(prev_line)
this_line
# trim new line by previous line
fix <- lwgeom::st_split(this_line, prev_line)
fix <- sf::st_collection_extract(fix, "LINESTRING")
fix
# Remove sections already split
prev_line <- lines[i - 1, ]
# trim new line by previous line
fix <- lwgeom::st_split(this_line, prev_line)
fix <- sf::st_collection_extract(fix, "LINESTRING")
if(nrow(fix) > 1) {
# gather segment linked to centerline
int_ll <- sf::st_intersects(fix, center_line)
int_ll <- lapply(int_ll, length)
int_ll <- unlist(int_ll)
this_line <- fix[which(int_ll == 1), ]
}
mapview(this_line) + maview(prev_line)
mapview(this_line) + mapview(prev_line)
# Dissolve buffer
buff$diss <- 1
b2 <- dplyr::group_by(buff)
i
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'grey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
# Dissolve buffer
buff$diss <- 1
b2 <- dplyr::group_by(buff)
buff_diss <- dplyr::summarise(b2)
nrow(lines)
buff_diss_raw <- buff_diss
# Store object here.
build_slits <- list()
coutner <- 1
for(i in 1:nrow(lines)) {
this_line <- lines[i, ]
if(i > 1) {
# Remove sections already split
prev_line <- lines[i - 1, ]
# trim new line by previous line
fix <- lwgeom::st_split(this_line, prev_line)
fix <- sf::st_collection_extract(fix, "LINESTRING")
if(nrow(fix) > 1) {
# gather segment linked to centerline
int_ll <- sf::st_intersects(fix, center_line)
int_ll <- lapply(int_ll, length)
int_ll <- unlist(int_ll)
this_line <- fix[which(int_ll == 1), ]
}
prev_line <- st_buffer(prev_line, 0.5)
int1 <- lapply(sf::st_intersects(buff_diss, prev_line), length)
int2 <- lapply(sf::st_intersects(buff_diss, this_line), length)
int1 <- unlist(int1); int2 <- unlist(int2)
previous_int <- which(int2 == 0 & int1 == 1)
continue_int <- which(int2 == 1 & int1 == 1)
buff_diss_store <- buff_diss[previous_int, ]
# Add and build object
build_slits[[coutner]] <- buff_diss_store
coutner <- coutner + 1
# update object
buff_diss <- buff_diss[continue_int, ]
}
buff_diss <- lwgeom::st_split(buff_diss, this_line)
buff_diss <- sf::st_collection_extract(buff_diss, "POLYGON")
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss_raw), add = TRUE, col = 'lightgrey')
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'darkgrey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
Sys.sleep(0.5)
}
this_line <- lines[i, ]
i
# Remove sections already split
prev_line <- lines[i - 1, ]
# trim new line by previous line
fix <- lwgeom::st_split(this_line, prev_line)
fix <- sf::st_collection_extract(fix, "LINESTRING")
fix
if(nrow(fix) > 1) {
# gather segment linked to centerline
int_ll <- sf::st_intersects(fix, center_line)
int_ll <- lapply(int_ll, length)
int_ll <- unlist(int_ll)
this_line <- fix[which(int_ll == 1), ]
}
this_line
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss_raw), add = TRUE, col = 'lightgrey')
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'darkgrey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
buff_diss
i
# Dissolve buffer
buff$diss <- 1
b2 <- dplyr::group_by(buff)
buff_diss <- dplyr::summarise(b2)
nrow(lines)
buff_diss_raw <- buff_diss
# Store object here.
build_slits <- list()
coutner <- 1
#for(i in 1:nrow(lines)) {
for(i in 1:77) {
this_line <- lines[i, ]
if(i > 1) {
# Remove sections already split
prev_line <- lines[i - 1, ]
# trim new line by previous line
fix <- lwgeom::st_split(this_line, prev_line)
fix <- sf::st_collection_extract(fix, "LINESTRING")
if(nrow(fix) > 1) {
# gather segment linked to centerline
int_ll <- sf::st_intersects(fix, center_line)
int_ll <- lapply(int_ll, length)
int_ll <- unlist(int_ll)
this_line <- fix[which(int_ll == 1), ]
}
prev_line <- st_buffer(prev_line, 0.5)
int1 <- lapply(sf::st_intersects(buff_diss, prev_line), length)
int2 <- lapply(sf::st_intersects(buff_diss, this_line), length)
int1 <- unlist(int1); int2 <- unlist(int2)
previous_int <- which(int2 == 0 & int1 == 1)
continue_int <- which(int2 == 1 & int1 == 1)
buff_diss_store <- buff_diss[previous_int, ]
# Add and build object
build_slits[[coutner]] <- buff_diss_store
coutner <- coutner + 1
# update object
buff_diss <- buff_diss[continue_int, ]
}
buff_diss <- lwgeom::st_split(buff_diss, this_line)
buff_diss <- sf::st_collection_extract(buff_diss, "POLYGON")
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss_raw), add = TRUE, col = 'lightgrey')
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'darkgrey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
#Sys.sleep(0.5)
}
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss_raw), add = TRUE, col = 'lightgrey')
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'darkgrey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
# Dissolve buffer
buff$diss <- 1
b2 <- dplyr::group_by(buff)
buff_diss <- dplyr::summarise(b2)
nrow(lines)
buff_diss_raw <- buff_diss
# Store object here.
build_slits <- list()
coutner <- 1
#for(i in 1:nrow(lines)) {
for(i in 1:76) {
this_line <- lines[i, ]
if(i > 1) {
# Remove sections already split
prev_line <- lines[i - 1, ]
# trim new line by previous line
fix <- lwgeom::st_split(this_line, prev_line)
fix <- sf::st_collection_extract(fix, "LINESTRING")
if(nrow(fix) > 1) {
# gather segment linked to centerline
int_ll <- sf::st_intersects(fix, center_line)
int_ll <- lapply(int_ll, length)
int_ll <- unlist(int_ll)
this_line <- fix[which(int_ll == 1), ]
}
prev_line <- st_buffer(prev_line, 0.5)
int1 <- lapply(sf::st_intersects(buff_diss, prev_line), length)
int2 <- lapply(sf::st_intersects(buff_diss, this_line), length)
int1 <- unlist(int1); int2 <- unlist(int2)
previous_int <- which(int2 == 0 & int1 == 1)
continue_int <- which(int2 == 1 & int1 == 1)
buff_diss_store <- buff_diss[previous_int, ]
# Add and build object
build_slits[[coutner]] <- buff_diss_store
coutner <- coutner + 1
# update object
buff_diss <- buff_diss[continue_int, ]
}
buff_diss <- lwgeom::st_split(buff_diss, this_line)
buff_diss <- sf::st_collection_extract(buff_diss, "POLYGON")
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss_raw), add = TRUE, col = 'lightgrey')
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'darkgrey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
#Sys.sleep(0.5)
}
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss_raw), add = TRUE, col = 'lightgrey')
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'darkgrey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
i
i = 77
this_line <- lines[i, ]
# Remove sections already split
prev_line <- lines[i - 1, ]
# trim new line by previous line
fix <- lwgeom::st_split(this_line, prev_line)
fix <- sf::st_collection_extract(fix, "LINESTRING")
fix
# gather segment linked to centerline
int_ll <- sf::st_intersects(fix, center_line)
int_ll <- lapply(int_ll, length)
int_ll <- unlist(int_ll)
this_line <- fix[which(int_ll == 1), ]
mapview(this_line) + mapview(prev_line)
prev_line <- st_buffer(prev_line, 0.5)
int1 <- lapply(sf::st_intersects(buff_diss, prev_line), length)
int2 <- lapply(sf::st_intersects(buff_diss, this_line), length)
int1
int2
int1
int1 <- unlist(int1); int2 <- unlist(int2)
int1
int2
any(int2) == 2
int2
any(int2 == 2)
if(any(int2 == 2)) { next }
# Dissolve buffer
buff$diss <- 1
b2 <- dplyr::group_by(buff)
buff_diss <- dplyr::summarise(b2)
nrow(lines)
buff_diss_raw <- buff_diss
# Store object here.
build_slits <- list()
coutner <- 1
for(i in 1:nrow(lines)) {
#for(i in 1:) {
this_line <- lines[i, ]
if(i > 1) {
# Remove sections already split
prev_line <- lines[i - 1, ]
# trim new line by previous line
fix <- lwgeom::st_split(this_line, prev_line)
fix <- sf::st_collection_extract(fix, "LINESTRING")
if(nrow(fix) > 1) {
# gather segment linked to centerline
int_ll <- sf::st_intersects(fix, center_line)
int_ll <- lapply(int_ll, length)
int_ll <- unlist(int_ll)
this_line <- fix[which(int_ll == 1), ]
}
prev_line <- st_buffer(prev_line, 0.5)
int1 <- lapply(sf::st_intersects(buff_diss, prev_line), length)
int2 <- lapply(sf::st_intersects(buff_diss, this_line), length)
int1 <- unlist(int1); int2 <- unlist(int2)
if(any(int2 == 2)) { next }
previous_int <- which(int2 == 0 & int1 == 1)
continue_int <- which(int2 == 1 & int1 == 1)
buff_diss_store <- buff_diss[previous_int, ]
# Add and build object
build_slits[[coutner]] <- buff_diss_store
coutner <- coutner + 1
# update object
buff_diss <- buff_diss[continue_int, ]
}
buff_diss <- lwgeom::st_split(buff_diss, this_line)
buff_diss <- sf::st_collection_extract(buff_diss, "POLYGON")
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss_raw), add = TRUE, col = 'lightgrey')
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'darkgrey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
#Sys.sleep(0.5)
}
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss_raw), add = TRUE, col = 'lightgrey')
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'darkgrey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
buff_diss
i
buff_diss[continue_int, ]
nrow(buff_diss[continue_int, ])
# Dissolve buffer
buff$diss <- 1
b2 <- dplyr::group_by(buff)
buff_diss <- dplyr::summarise(b2)
nrow(lines)
buff_diss_raw <- buff_diss
# Store object here.
build_slits <- list()
coutner <- 1
for(i in 1:nrow(lines)) {
#for(i in 1:) {
this_line <- lines[i, ]
if(i > 1) {
# Remove sections already split
prev_line <- lines[i - 1, ]
# trim new line by previous line
fix <- lwgeom::st_split(this_line, prev_line)
fix <- sf::st_collection_extract(fix, "LINESTRING")
if(nrow(fix) > 1) {
# gather segment linked to centerline
int_ll <- sf::st_intersects(fix, center_line)
int_ll <- lapply(int_ll, length)
int_ll <- unlist(int_ll)
this_line <- fix[which(int_ll == 1), ]
}
prev_line <- st_buffer(prev_line, 0.5)
int1 <- lapply(sf::st_intersects(buff_diss, prev_line), length)
int2 <- lapply(sf::st_intersects(buff_diss, this_line), length)
int1 <- unlist(int1); int2 <- unlist(int2)
if(any(int2 == 2)) { next }
previous_int <- which(int2 == 0 & int1 == 1)
continue_int <- which(int2 == 1 & int1 == 1)
buff_diss_store <- buff_diss[previous_int, ]
# Add and build object
build_slits[[coutner]] <- buff_diss_store
coutner <- coutner + 1
if(nrow(buff_diss[continue_int, ]) == 0) {
next
}
# update object
buff_diss <- buff_diss[continue_int, ]
}
buff_diss <- lwgeom::st_split(buff_diss, this_line)
buff_diss <- sf::st_collection_extract(buff_diss, "POLYGON")
plot(sf::st_geometry(this_line))
plot(sf::st_geometry(buff_diss_raw), add = TRUE, col = 'lightgrey')
plot(sf::st_geometry(buff_diss), add = TRUE, col = 'darkgrey')
plot(sf::st_geometry(this_line), add = TRUE, col = 'red')
Sys.sleep(0.1)
}
#--------------------------------------
library(devtools)
# =====================================
# Rebuild Package
rm(list = ls())
devtools::load_all()
devtools::document()
#--------------------------------------
library(devtools)
# =====================================
# Rebuild Package
rm(list = ls())
devtools::load_all()
devtools::document()
# =====================================
# Rebuild Package
rm(list = ls())
devtools::load_all()
devtools::document()
devtools::test()  # Run tests
devtools::check(vignettes = FALSE, manual = FALSE) # Operating system test
devtools::check(vignettes = FALSE, manual = FALSE) # Operating system test
devtools::check(vignettes = FALSE, manual = FALSE) # Operating system test
devtools::check(vignettes = FALSE, manual = FALSE) # Operating system test
devtools::check(vignettes = FALSE, manual = FALSE) # Operating system test
# =====================================
# Remove and re install package locally
# Ctrl + Shift + F10 to restart RStudio
remove.packages("streamgis")
# =====================================
# Remove and re install package locally
# Ctrl + Shift + F10 to restart RStudio
remove.packages("streamgis")
# =====================================
# Remove and re install package locally
# Ctrl + Shift + F10 to restart RStudio
remove.packages("streamgis")
# =====================================
# Remove and re install package locally
# Ctrl + Shift + F10 to restart RStudio
remove.packages("streamgis")
install.packages(getwd(), repos = NULL, type = "source")
